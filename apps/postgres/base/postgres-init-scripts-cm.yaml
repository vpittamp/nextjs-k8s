# 'apps/postgres/base/postgres-init-scripts-cm.yaml'
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: nextjs # Or your target namespace for PostgreSQL
data:
  0000_keen_devos.sql: |-
    CREATE TABLE IF NOT EXISTS "Chat" (
    	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
    	"createdAt" timestamp NOT NULL,
    	"messages" json NOT NULL,
    	"userId" uuid NOT NULL
    );
    --> statement-breakpoint
    CREATE TABLE IF NOT EXISTS "User" (
    	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
    	"email" varchar(64) NOT NULL,
    	"password" varchar(64)
    );
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Chat" ADD CONSTRAINT "Chat_userId_User_id_fk" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
  0001_sparkling_blue_marvel.sql: |-
    CREATE TABLE IF NOT EXISTS "Suggestion" (
    	"id" uuid DEFAULT gen_random_uuid() NOT NULL,
    	"documentId" uuid NOT NULL,
    	"documentCreatedAt" timestamp NOT NULL,
    	"originalText" text NOT NULL,
    	"suggestedText" text NOT NULL,
    	"description" text,
    	"isResolved" boolean DEFAULT false NOT NULL,
    	"userId" uuid NOT NULL,
    	"createdAt" timestamp NOT NULL,
    	CONSTRAINT "Suggestion_id_pk" PRIMARY KEY("id")
    );
    --> statement-breakpoint
    CREATE TABLE IF NOT EXISTS "Document" (
    	"id" uuid DEFAULT gen_random_uuid() NOT NULL,
    	"createdAt" timestamp NOT NULL,
    	"title" text NOT NULL,
    	"content" text,
    	"userId" uuid NOT NULL,
    	CONSTRAINT "Document_id_createdAt_pk" PRIMARY KEY("id","createdAt")
    );
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Suggestion" ADD CONSTRAINT "Suggestion_userId_User_id_fk" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Suggestion" ADD CONSTRAINT "Suggestion_documentId_documentCreatedAt_Document_id_createdAt_fk" FOREIGN KEY ("documentId","documentCreatedAt") REFERENCES "public"."Document"("id","createdAt") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Document" ADD CONSTRAINT "Document_userId_User_id_fk" FOREIGN KEY ("userId") REFERENCES "public"."User"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
  0002_wandering_riptide.sql: |-
    CREATE TABLE IF NOT EXISTS "Message" (
    	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
    	"chatId" uuid NOT NULL,
    	"role" varchar NOT NULL,
    	"content" json NOT NULL,
    	"createdAt" timestamp NOT NULL
    );
    --> statement-breakpoint
    CREATE TABLE IF NOT EXISTS "Vote" (
    	"chatId" uuid NOT NULL,
    	"messageId" uuid NOT NULL,
    	"isUpvoted" boolean NOT NULL,
    	CONSTRAINT "Vote_chatId_messageId_pk" PRIMARY KEY("chatId","messageId")
    );
    --> statement-breakpoint
    ALTER TABLE "Chat" ADD COLUMN "title" text NOT NULL;--> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Message" ADD CONSTRAINT "Message_chatId_Chat_id_fk" FOREIGN KEY ("chatId") REFERENCES "public"."Chat"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Vote" ADD CONSTRAINT "Vote_chatId_Chat_id_fk" FOREIGN KEY ("chatId") REFERENCES "public"."Chat"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Vote" ADD CONSTRAINT "Vote_messageId_Message_id_fk" FOREIGN KEY ("messageId") REFERENCES "public"."Message"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    ALTER TABLE "Chat" DROP COLUMN IF EXISTS "messages";
  0003_cloudy_glorian.sql: |-
    ALTER TABLE "Chat" ADD COLUMN "visibility" varchar DEFAULT 'private' NOT NULL;
  0004_odd_slayback.sql: |-
    ALTER TABLE "Document" ADD COLUMN "text" varchar DEFAULT 'text' NOT NULL;
  0005_wooden_whistler.sql: |-
    CREATE TABLE IF NOT EXISTS "Message_v2" (
    	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
    	"chatId" uuid NOT NULL,
    	"role" varchar NOT NULL,
    	"parts" json NOT NULL,
    	"attachments" json NOT NULL,
    	"createdAt" timestamp NOT NULL
    );
    --> statement-breakpoint
    CREATE TABLE IF NOT EXISTS "Vote_v2" (
    	"chatId" uuid NOT NULL,
    	"messageId" uuid NOT NULL,
    	"isUpvoted" boolean NOT NULL,
    	CONSTRAINT "Vote_v2_chatId_messageId_pk" PRIMARY KEY("chatId","messageId")
    );
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Message_v2" ADD CONSTRAINT "Message_v2_chatId_Chat_id_fk" FOREIGN KEY ("chatId") REFERENCES "public"."Chat"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Vote_v2" ADD CONSTRAINT "Vote_v2_chatId_Chat_id_fk" FOREIGN KEY ("chatId") REFERENCES "public"."Chat"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Vote_v2" ADD CONSTRAINT "Vote_v2_messageId_Message_v2_id_fk" FOREIGN KEY ("messageId") REFERENCES "public"."Message_v2"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;
  0006_marvelous_frog_thor.sql: |-
    CREATE TABLE IF NOT EXISTS "Stream" (
    	"id" uuid DEFAULT gen_random_uuid() NOT NULL,
    	"chatId" uuid NOT NULL,
    	"createdAt" timestamp NOT NULL,
    	CONSTRAINT "Stream_id_pk" PRIMARY KEY("id")
    );
    --> statement-breakpoint
    DO $$ BEGIN
     ALTER TABLE "Stream" ADD CONSTRAINT "Stream_chatId_Chat_id_fk" FOREIGN KEY ("chatId") REFERENCES "public"."Chat"("id") ON DELETE no action ON UPDATE no action;
    EXCEPTION
     WHEN duplicate_object THEN null;
    END $$;